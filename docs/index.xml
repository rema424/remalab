<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RemaLab</title><link>https://rema424.github.io/remalab/</link><description>RemaLab</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 20 Nov 2020 15:00:27 +0900</lastBuildDate><atom:link href="https://rema424.github.io/remalab/index.xml" rel="self" type="application/rss+xml"/><item><title>EC2のデフォルトユーザー(ec2-user)とデフォルトSSHポートの変更をユーザーデータで自動化する</title><link>https://rema424.github.io/remalab/posts/ec2-userdata/</link><pubDate>Fri, 20 Nov 2020 15:00:27 +0900</pubDate><guid>https://rema424.github.io/remalab/posts/ec2-userdata/</guid><description>&lt;p>EC2の起動時のオプションにユーザーデータという項目があります。
こちらを利用すると立ち上げ時のOS内部の設定を変更できます。
例えばEC2ではデフォルトでec2-userという名称のユーザーが作られますが、このデフォルトユーザーを任意の名称に変更することも可能です。&lt;/p>
&lt;p>今回は例として「デフォルトユーザーの名称変更」と「SSHポートの変更」をやってみます。&lt;/p>
&lt;p>と言ってもやることは簡単で、EC2起動時の項目に「ユーザーデータ」というのがあるのでそこに以下のyaml形式のテキストを入力して立ち上げるだけです。&lt;/p>
&lt;p>以下の &lt;code>&amp;lt;username&amp;gt;&lt;/code> は任意のユーザー名で置き換えます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#75715e">#cloud-config&lt;/span>
&lt;span style="color:#f92672">timezone&lt;/span>: &lt;span style="color:#ae81ff">Asia/Tokyo&lt;/span>
&lt;span style="color:#f92672">users&lt;/span>:
- &lt;span style="color:#ae81ff">default&lt;/span>
&lt;span style="color:#f92672">runcmd&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#39;/bin/sed -i&amp;#34;.org&amp;#34; --follow-symlinks -e &amp;#34;s/#Port 22/Port 10022/&amp;#34; /etc/ssh/sshd_config&amp;#39;&lt;/span>
- &lt;span style="color:#e6db74">&amp;#39;systemctl restart sshd.service&amp;#39;&lt;/span>
&lt;span style="color:#f92672">system_info&lt;/span>:
&lt;span style="color:#f92672">default_user&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;username&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下のコマンドでSSHログインします。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">ssh -i &amp;lt;path-to-key&amp;gt; &amp;lt;username&amp;gt;@&amp;lt;hostname&amp;gt; -p &lt;span style="color:#ae81ff">10022&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【2020年11月版】PyTorchとBERTで文章の分散表現（ベクトル）を取得する</title><link>https://rema424.github.io/remalab/posts/sentence-vector/</link><pubDate>Fri, 13 Nov 2020 21:13:05 +0900</pubDate><guid>https://rema424.github.io/remalab/posts/sentence-vector/</guid><description>&lt;p>日本語における自然言語処理のライブラリ整備がここ1年で大きく進んだみたいです。
これに伴って情報の古い記事も多くなったように感じられたので記しておきます。&lt;/p>
&lt;p>以前はBERTで日本語を扱う場合は形態素解析やBERTトークン化を自身で行う必要があったようですが、今はライブラリに一任できます。環境構築も非常に簡単でした。&lt;/p>
&lt;h2 id="setup">setup&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># python3.8のインストール（2020年11月現在、3.9だとエラーになるライブラリが多いため3.8を利用する）&lt;/span>
brew install python@3.8
&lt;span style="color:#75715e"># 仮想環境の作成&lt;/span>
python3 -m venv venv
&lt;span style="color:#75715e"># 仮想環境をアクティベート&lt;/span>
. venv/bin/activate
&lt;span style="color:#75715e"># pipをアップグレード&lt;/span>
python -m pip install --upgrade pip
&lt;span style="color:#75715e"># pytorch（機械学習ライブラリ）のインストール&lt;/span>
pip install torch
&lt;span style="color:#75715e"># transformers（自然言語処理における学習済みモデル提供ライブラリ）のインストール&lt;/span>
pip install transformers
&lt;span style="color:#75715e"># numpy（行列計算ライブラリ）のインストール&lt;/span>
pip install numpy
&lt;span style="color:#75715e"># fugashi（形態素解析器）のインストール&lt;/span>
pip install fugashi
&lt;span style="color:#75715e"># ipadic（形態素解析用辞書）のインストール&lt;/span>
pip install ipadic
&lt;span style="color:#75715e"># mojimoji（日本語文字列の半角・全角変換ライブラリ）のインストール&lt;/span>
pip install mojimoji
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="サンプルコード">サンプルコード&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-py" data-lang="py">&lt;span style="color:#f92672">import&lt;/span> torch
&lt;span style="color:#f92672">from&lt;/span> transformers &lt;span style="color:#f92672">import&lt;/span> BertModel
&lt;span style="color:#f92672">from&lt;/span> transformers.tokenization_bert_japanese &lt;span style="color:#f92672">import&lt;/span> BertJapaneseTokenizer
&lt;span style="color:#f92672">import&lt;/span> re
&lt;span style="color:#f92672">import&lt;/span> mojimoji
&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#f92672">as&lt;/span> np
&lt;span style="color:#f92672">from&lt;/span> pprint &lt;span style="color:#f92672">import&lt;/span> pprint &lt;span style="color:#66d9ef">as&lt;/span> p
&lt;span style="color:#75715e"># GPUが利用できるか確認&lt;/span>
p(torch&lt;span style="color:#f92672">.&lt;/span>cuda&lt;span style="color:#f92672">.&lt;/span>is_available())
&lt;span style="color:#75715e"># GPUとCPUのどちらを利用するか判定&lt;/span>
device &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>device(&lt;span style="color:#e6db74">&amp;#34;cuda:0&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>cuda&lt;span style="color:#f92672">.&lt;/span>is_available() &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cpu&amp;#34;&lt;/span>)
p(device)
&lt;span style="color:#75715e"># トークナイザーの読み込み&lt;/span>
tokenizer &lt;span style="color:#f92672">=&lt;/span> BertJapaneseTokenizer&lt;span style="color:#f92672">.&lt;/span>from_pretrained(
&lt;span style="color:#e6db74">&amp;#34;cl-tohoku/bert-base-japanese-whole-word-masking&amp;#34;&lt;/span>
)
&lt;span style="color:#75715e"># 学習済みモデルの読み込み&lt;/span>
model &lt;span style="color:#f92672">=&lt;/span> BertModel&lt;span style="color:#f92672">.&lt;/span>from_pretrained(&lt;span style="color:#e6db74">&amp;#34;cl-tohoku/bert-base-japanese-whole-word-masking&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">preprocess&lt;/span>(text):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> 日本語文字列の前処理を行う
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># 全角文字を半角に変換&lt;/span>
text &lt;span style="color:#f92672">=&lt;/span> mojimoji&lt;span style="color:#f92672">.&lt;/span>zen_to_han(text)
&lt;span style="color:#75715e"># 空白と改行を削除し、コンマとピリオドを句点と読点に変換&lt;/span>
text &lt;span style="color:#f92672">=&lt;/span> (
text&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;、&amp;#34;&lt;/span>)
&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;。&amp;#34;&lt;/span>)
&lt;span style="color:#f92672">.&lt;/span>strip()
)
&lt;span style="color:#75715e"># 数字を#に変換&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> bool(re&lt;span style="color:#f92672">.&lt;/span>search(&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;[0-9]&amp;#34;&lt;/span>, text)):
text &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>sub(&lt;span style="color:#e6db74">&amp;#34;[0-9]{5,}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;#####&amp;#34;&lt;/span>, text)
text &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>sub(&lt;span style="color:#e6db74">&amp;#34;[0-9]{4}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;####&amp;#34;&lt;/span>, text)
text &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>sub(&lt;span style="color:#e6db74">&amp;#34;[0-9]{3}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;###&amp;#34;&lt;/span>, text)
text &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>sub(&lt;span style="color:#e6db74">&amp;#34;[0-9]{2}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;##&amp;#34;&lt;/span>, text)
text &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>sub(&lt;span style="color:#e6db74">&amp;#34;[0-9]{1}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;#&amp;#34;&lt;/span>, text)
&lt;span style="color:#75715e"># 半角文字を全角に変換&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> mojimoji&lt;span style="color:#f92672">.&lt;/span>han_to_zen(text)
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">split_to_sentences&lt;/span>(text):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> 文章を文単位で分割しリストで返却する
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
text &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>sub(&lt;span style="color:#e6db74">&amp;#34;。&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;。&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, text)
&lt;span style="color:#66d9ef">return&lt;/span> [s &lt;span style="color:#66d9ef">for&lt;/span> s &lt;span style="color:#f92672">in&lt;/span> text&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">if&lt;/span> s &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>]
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">aggregate_tensor&lt;/span>(embeddings, pooling_strategy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;REDUCE_MEAN_MAX&amp;#34;&lt;/span>):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> 文ベクトルを集計して文章ベクトルを返却する
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> pooling_strategy &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;REDUCE_MEAN&amp;#34;&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>mean(embeddings, dim&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">elif&lt;/span> pooling_strategy &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;REDUCE_MAX&amp;#34;&lt;/span>:
max, _ &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>max(embeddings, dim&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> max
&lt;span style="color:#66d9ef">elif&lt;/span> pooling_strategy &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;REDUCE_MEAN_MAX&amp;#34;&lt;/span>:
max, _ &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>max(embeddings, dim&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
mean &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>mean(embeddings, dim&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>hstack((max, mean))
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">aggregate_numpy&lt;/span>(embeddings, pooling_strategy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;REDUCE_MEAN_MAX&amp;#34;&lt;/span>):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> 文ベクトルを集計して文章ベクトルを返却する
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> pooling_strategy &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;REDUCE_MEAN&amp;#34;&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>mean(embeddings, axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">elif&lt;/span> pooling_strategy &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;REDUCE_MAX&amp;#34;&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>max(embeddings, axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">elif&lt;/span> pooling_strategy &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;REDUCE_MEAN_MAX&amp;#34;&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>r_[np&lt;span style="color:#f92672">.&lt;/span>max(embeddings, axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>), np&lt;span style="color:#f92672">.&lt;/span>mean(embeddings, axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)]
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">embedding&lt;/span>(text):
&lt;span style="color:#75715e"># 前処理&lt;/span>
text &lt;span style="color:#f92672">=&lt;/span> preprocess(text)
&lt;span style="color:#75715e"># 文単位に分割&lt;/span>
sentences &lt;span style="color:#f92672">=&lt;/span> split_to_sentences(text)
&lt;span style="color:#75715e"># BERTトークン化&lt;/span>
encoded &lt;span style="color:#f92672">=&lt;/span> tokenizer&lt;span style="color:#f92672">.&lt;/span>batch_encode_plus(
sentences, padding&lt;span style="color:#f92672">=&lt;/span>True, add_special_tokens&lt;span style="color:#f92672">=&lt;/span>True
)
&lt;span style="color:#75715e"># BERTトークンID列を抽出&lt;/span>
input_ids &lt;span style="color:#f92672">=&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>tensor(encoded[&lt;span style="color:#e6db74">&amp;#34;input_ids&amp;#34;&lt;/span>], device&lt;span style="color:#f92672">=&lt;/span>device)
&lt;span style="color:#75715e"># BERTの最大許容トークン数が512なので超える場合は切り詰める&lt;/span>
input_ids &lt;span style="color:#f92672">=&lt;/span> input_ids[:, :&lt;span style="color:#ae81ff">512&lt;/span>]
&lt;span style="color:#66d9ef">with&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>no_grad(): &lt;span style="color:#75715e"># 勾配計算なし&lt;/span>
&lt;span style="color:#75715e"># 単語ベクトルを計算&lt;/span>
outputs &lt;span style="color:#f92672">=&lt;/span> model(input_ids)
&lt;span style="color:#75715e"># 最終層の隠れ状態ベクトルを取得&lt;/span>
last_hidden_states &lt;span style="color:#f92672">=&lt;/span> outputs[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;span style="color:#75715e"># 各文における[CLS]トークンの単語ベクトルを抽出（これを文ベクトルとみなす）&lt;/span>
vecs &lt;span style="color:#f92672">=&lt;/span> last_hidden_states[:, &lt;span style="color:#ae81ff">0&lt;/span>, :]
&lt;span style="color:#75715e"># 文ベクトルから文章ベクトルを計算&lt;/span>
vec &lt;span style="color:#f92672">=&lt;/span> aggregate_tensor(vecs)
&lt;span style="color:#75715e"># 保存容量削減のため型変換&lt;/span>
&lt;span style="color:#75715e"># vec = vec.type(torch.float16)&lt;/span>
&lt;span style="color:#75715e"># データをgpuからcpuに載せ替え&lt;/span>
&lt;span style="color:#75715e"># vec = vec.cpu()&lt;/span>
&lt;span style="color:#75715e"># numpy配列に変換&lt;/span>
&lt;span style="color:#75715e"># vec = vec.numpy()&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> vec
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">cos_similarity&lt;/span>(x, y, eps&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1e-8&lt;/span>):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> コサイン類似度を計算する
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
nx &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">/&lt;/span> (torch&lt;span style="color:#f92672">.&lt;/span>sqrt(torch&lt;span style="color:#f92672">.&lt;/span>sum(x &lt;span style="color:#f92672">**&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> eps)
ny &lt;span style="color:#f92672">=&lt;/span> y &lt;span style="color:#f92672">/&lt;/span> (torch&lt;span style="color:#f92672">.&lt;/span>sqrt(torch&lt;span style="color:#f92672">.&lt;/span>sum(y &lt;span style="color:#f92672">**&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> eps)
&lt;span style="color:#66d9ef">return&lt;/span> torch&lt;span style="color:#f92672">.&lt;/span>dot(nx, ny)
&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
text_a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">夏目 漱石（なつめ そうせき、1867年2月9日〈慶応3年1月5日〉 - 1916年〈大正5年〉12月9日）は、日本の小説家、評論家、英文学者、俳人。本名は夏目 金之助（なつめ きんのすけ）。俳号は愚陀仏。明治末期から大正初期にかけて活躍した近代日本文学の頂点に立つ作家の一人である。代表作は『吾輩は猫である』『坊っちゃん』『三四郎』『それから』『こゝろ』『明暗』など。明治の文豪として日本の千円紙幣の肖像にもなり、講演録「私の個人主義」も知られている。漱石の私邸に門下生が集った会は木曜会と呼ばれた。
&lt;/span>&lt;span style="color:#e6db74">江戸の牛込馬場下横町（現在の東京都新宿区喜久井町）出身。大学時代に正岡子規と出会い、俳句を学ぶ。帝国大学（のちの東京帝国大学、現在の東京大学）英文科卒業後、松山で愛媛県尋常中学校教師、熊本で第五高等学校教授などを務めたあと、イギリスへ留学。帰国後は東京帝国大学講師として英文学を講じ、講義録には『文学論』がある。
&lt;/span>&lt;span style="color:#e6db74">講師の傍ら『吾輩は猫である』を雑誌『ホトトギス』に発表。これが評判になり『坊っちゃん』『倫敦塔』などを書く。その後朝日新聞社に入社し、『虞美人草』『三四郎』『それから』などを掲載。当初は余裕派と呼ばれた。「修善寺の大患」後は、『行人』『こゝろ』『道草』などを執筆。「則天去私（そくてんきょし）」の境地に達したといわれる。晩年は胃潰瘍に悩まされ、『明暗』が絶筆となった。
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
text_b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">森 鷗外（もり おうがい、文久2年1月19日[1]〈1862年2月17日[2][注釈 1]〉 - 1922年〈大正11年〉7月9日）は、日本の明治・大正期の小説家、評論家、翻訳家、陸軍軍医（軍医総監＝中将相当）、官僚（高等官一等）。位階勲等は従二位・勲一等・功三級、医学博士、文学博士。本名は森 林太郎（もり りんたろう）。
&lt;/span>&lt;span style="color:#e6db74">石見国津和野（現：島根県津和野町）出身。東京大学医学部[注釈 2]卒業。
&lt;/span>&lt;span style="color:#e6db74">大学卒業後、陸軍軍医になり、陸軍省派遣留学生としてドイツでも軍医として4年過ごした。帰国後、訳詩編「於母影」、小説「舞姫」、翻訳「即興詩人」を発表する一方、同人たちと文芸雑誌『しがらみ草紙』を創刊して文筆活動に入った。その後、日清戦争出征や小倉転勤などにより一時期創作活動から遠ざかったものの、『スバル』創刊後に「ヰタ・セクスアリス」「雁」などを発表。乃木希典の殉死に影響されて「興津弥五右衛門の遺書」を発表後、「阿部一族」「高瀬舟」など歴史小説や史伝「澁江抽斎」なども執筆した。
&lt;/span>&lt;span style="color:#e6db74">晩年、帝室博物館（現在の東京国立博物館・奈良国立博物館・京都国立博物館等）総長や帝国美術院（現：日本芸術院）初代院長なども歴任した。
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
vec_a &lt;span style="color:#f92672">=&lt;/span> embedding(text_a)
vec_b &lt;span style="color:#f92672">=&lt;/span> embedding(text_b)
sim &lt;span style="color:#f92672">=&lt;/span> cos_similarity(vec_a, vec_b)&lt;span style="color:#f92672">.&lt;/span>item()
p(vec_a&lt;span style="color:#f92672">.&lt;/span>shape)
p(vec_a&lt;span style="color:#f92672">.&lt;/span>dtype)
p(vec_a[:&lt;span style="color:#ae81ff">5&lt;/span>])
p(vec_b&lt;span style="color:#f92672">.&lt;/span>shape)
p(vec_b&lt;span style="color:#f92672">.&lt;/span>dtype)
p(vec_b[:&lt;span style="color:#ae81ff">5&lt;/span>])
p(sim)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="サンプルコードの実行">サンプルコードの実行&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ python main.py
False
device&lt;span style="color:#f92672">(&lt;/span>type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cpu&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
torch.Size&lt;span style="color:#f92672">([&lt;/span>1536&lt;span style="color:#f92672">])&lt;/span>
torch.float32
tensor&lt;span style="color:#f92672">([&lt;/span>-0.1967, 0.9231, 0.3203, 0.4452, 0.1927&lt;span style="color:#f92672">])&lt;/span>
torch.Size&lt;span style="color:#f92672">([&lt;/span>1536&lt;span style="color:#f92672">])&lt;/span>
torch.float32
tensor&lt;span style="color:#f92672">([&lt;/span>-0.1913, 0.5956, 0.1263, 0.3581, -0.2445&lt;span style="color:#f92672">])&lt;/span>
0.9690771102905273
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Hugo と GitHub Pages で技術ブログ【Google Analytics V4 対応】</title><link>https://rema424.github.io/remalab/posts/hugo-getting-started/</link><pubDate>Sat, 31 Oct 2020 16:03:00 +0900</pubDate><guid>https://rema424.github.io/remalab/posts/hugo-getting-started/</guid><description>&lt;h2 id="toc">TOC&lt;/h2>
&lt;ul>
&lt;li>Getting Started&lt;/li>
&lt;li>Host on GitHub&lt;/li>
&lt;li>Google Analytics&lt;/li>
&lt;li>Google Search Console&lt;/li>
&lt;li>Privacy Policy&lt;/li>
&lt;/ul>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;h3 id="インストール">インストール&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># インストール&lt;/span>
brew install hugo
&lt;span style="color:#75715e"># バージョン確認&lt;/span>
hugo version
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="プロジェクト作成">プロジェクト作成&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">hugo new site &amp;lt;your-project-name&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="テーマの設定">テーマの設定&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># ディレクトリ移動&lt;/span>
cd &amp;lt;your-project-name&amp;gt;
&lt;span style="color:#75715e"># git 初期化&lt;/span>
git init
&lt;span style="color:#75715e"># テーマの追加（今回は Anubis を使用）&lt;/span>
git submodule add https://github.com/mitrichius/hugo-theme-anubis.git themes/anubis
&lt;span style="color:#75715e"># 設定ファイルにテーマを追加&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#39;theme = &amp;#34;anubis&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; config.toml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="記事の作成">記事の作成&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">hugo new &amp;lt;section&amp;gt;/&amp;lt;article-title&amp;gt;.md
&lt;span style="color:#75715e"># =&amp;gt; content/&amp;lt;section&amp;gt;/&amp;lt;argicle-title&amp;gt;.md が生成される&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ローカルサーバーの起動">ローカルサーバーの起動&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># サーバー起動（ドラフトも表示）&lt;/span>
hugo server -D
&lt;span style="color:#75715e"># ブラウザで表示&lt;/span>
open http://localhost:1313
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="設定ファイルの編集">設定ファイルの編集&lt;/h3>
&lt;p>お好みですが、&lt;code>toml&lt;/code> から &lt;code>yaml&lt;/code> に変更します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">mv config.toml config.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>中身を編集します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#75715e"># config.yaml&lt;/span>
&lt;span style="color:#f92672">baseURL&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://example.org/&amp;#34;&lt;/span>
&lt;span style="color:#f92672">languageCode&lt;/span>: &lt;span style="color:#ae81ff">ja-jp&lt;/span>
&lt;span style="color:#f92672">title&lt;/span>: &lt;span style="color:#ae81ff">RemaLab&lt;/span>
&lt;span style="color:#f92672">theme&lt;/span>: &lt;span style="color:#ae81ff">anubis&lt;/span>
&lt;span style="color:#f92672">publishDir&lt;/span>: &lt;span style="color:#ae81ff">docs&lt;/span>
&lt;span style="color:#f92672">enableRobotsTXT&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">hasCJKLanguage&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">summaryLength&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#f92672">params&lt;/span>:
&lt;span style="color:#f92672">author&lt;/span>: &lt;span style="color:#ae81ff">rema&lt;/span>
&lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;span style="color:#f92672">readMore&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ビルド">ビルド&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># ドラフトも含める場合&lt;/span>
hugo -D
&lt;span style="color:#75715e"># ドラフトを含めない場合&lt;/span>
hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="host-on-github">Host on GitHub&lt;/h2>
&lt;h3 id="リモートリポジトリの作成">リモートリポジトリの作成&lt;/h3>
&lt;p>GitHub で新規プロジェクトを作成します（今回は remalab で作成）。&lt;/p>
&lt;p>リモートリポジトリが作成できたら push します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># 変更をステージ&lt;/span>
git add .
&lt;span style="color:#75715e"># コミット&lt;/span>
git commit -m &lt;span style="color:#e6db74">&amp;#34;first commit&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># リモートリポジトリの追加&lt;/span>
git remote add origin https://github.com/rema424/remalab.git
&lt;span style="color:#75715e"># ブランチの切替&lt;/span>
git branch -M main
&lt;span style="color:#75715e"># puch&lt;/span>
git push -u origin main
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="設定ファイルの編集-1">設定ファイルの編集&lt;/h3>
&lt;p>GitHub Pages には &lt;strong>User/Organization Pages&lt;/strong> と &lt;strong>Project Pages&lt;/strong> の 2 タイプがあります。&lt;/p>
&lt;p>今回は &lt;strong>Project Pages&lt;/strong> を採用します。&lt;/p>
&lt;pre>&lt;code>https://&amp;lt;username&amp;gt;.github.io/&amp;lt;project&amp;gt;/
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#75715e"># config.yaml&lt;/span>
&lt;span style="color:#f92672">baseURL&lt;/span>: &lt;span style="color:#ae81ff">https://rema424.github.io/remalab/&lt;/span>
&lt;span style="color:#f92672">publishDir&lt;/span>: &lt;span style="color:#ae81ff">docs&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="github-の設定変更">GitHub の設定変更&lt;/h3>
&lt;p>GitHub &amp;gt; Project &amp;gt; Settings &amp;gt; GitHub Pages より設定を変更します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">Source&lt;/span>:
&lt;span style="color:#f92672">branch&lt;/span>: &lt;span style="color:#ae81ff">main&lt;/span>
&lt;span style="color:#f92672">folder&lt;/span>: &lt;span style="color:#ae81ff">/docs&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ローカルサーバーの起動-1">ローカルサーバーの起動&lt;/h3>
&lt;p>設定を変更したため、一度ローカルで確認します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># サーバー起動（ドラフトも表示）&lt;/span>
hugo server -D
&lt;span style="color:#75715e"># =&amp;gt; 設定変更により TOP が localhost:1313/ から localhost:1313/remalab/ へ&lt;/span>
&lt;span style="color:#75715e"># ブラウザで表示&lt;/span>
open http://localhost:1313/remalab/
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="再ビルド">再ビルド&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># 既存のビルド先ディレクトリを削除&lt;/span>
rm -r public
&lt;span style="color:#75715e"># ビルド（テストのためドラフトも含む）&lt;/span>
hugo -D
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="デプロイ">デプロイ&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">git add .
git commit -m &lt;span style="color:#e6db74">&amp;#34;first deploy&amp;#34;&lt;/span>
git push
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="確認">確認&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">open https://rema424.github.io/remalab/
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="google-analytics">Google Analytics&lt;/h2>
&lt;h3 id="google-analytics-プロパティの作成">Google Analytics プロパティの作成&lt;/h3>
&lt;p>Google Analytics アカウントを未所持の場合は作成します。&lt;/p>
&lt;p>アカウントが準備できたらプロパティを作成します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">プロパティ名&lt;/span>: &lt;span style="color:#ae81ff">remalab&lt;/span>
&lt;span style="color:#f92672">レポートのタイムゾーン&lt;/span>: &lt;span style="color:#ae81ff">日本&lt;/span>
&lt;span style="color:#f92672">通貨&lt;/span>: &lt;span style="color:#ae81ff">日本円&lt;/span>
&lt;span style="color:#f92672">業種&lt;/span>: &lt;span style="color:#ae81ff">Computers &amp;amp; Electronics&lt;/span>
&lt;span style="color:#f92672">ビジネスの規模&lt;/span>: &lt;span style="color:#ae81ff">小規模&lt;/span>
&lt;span style="color:#f92672">利用目的&lt;/span>: &lt;span style="color:#ae81ff">サイトまたはアプリでの顧客エンゲージメントを測定する&lt;/span>
&lt;span style="color:#f92672">Choose a platform&lt;/span>: &lt;span style="color:#ae81ff">ウェブ&lt;/span>
&lt;span style="color:#f92672">ウェブサイトのURL&lt;/span>: &lt;span style="color:#ae81ff">https://rema424.github.io/remalab/&lt;/span>
&lt;span style="color:#f92672">ストリーム名&lt;/span>: &lt;span style="color:#ae81ff">RemaLab&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロパティが作成できたら、[管理] &amp;gt; [プロパティ] &amp;gt; [データ設定] &amp;gt; [データ保持] からイベントデータ保持を14か月に変更しておきます。&lt;/p>
&lt;h3 id="google-tag-manager-コンテナの作成">Google Tag Manager コンテナの作成&lt;/h3>
&lt;p>Google Tag Manager アカウントを未所持の場合は作成します。&lt;/p>
&lt;p>アカウントが準備できたらコンテナを作成します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">コンテナ名&lt;/span>: &lt;span style="color:#ae81ff">remalab&lt;/span>
&lt;span style="color:#f92672">ターゲットプラットフォーム&lt;/span>: &lt;span style="color:#ae81ff">ウェブ&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンテナを作成すると &lt;code>&amp;lt;head&amp;gt;&lt;/code> と &lt;code>&amp;lt;body&amp;gt;&lt;/code> に設置するスニペットが表示されるので控えておきます。（後で GTM ダッシュボード上で確認することもできます。）&lt;/p>
&lt;h3 id="パーシャルの作成">パーシャルの作成&lt;/h3>
&lt;p>GTM スニペットを設置するためのファイルを作成していきます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># ディレクトリの作成&lt;/span>
mkdir -p layouts/partials/gtm/
&lt;span style="color:#75715e"># ファイル作成&lt;/span>
touch layouts/partials/gtm/head.html layouts/partials/gtm/body.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>それぞれのファイルに控えておいた GTM スニペットを記載して保存します。&lt;/p>
&lt;p>環境変数が &lt;code>production&lt;/code> の場合のみ、script を出力するようにします。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!-- layouts/partials/gtm/head.html --&amp;gt;&lt;/span>
{{ if eq (getenv &amp;#34;HUGO_ENV&amp;#34;) &amp;#34;production&amp;#34; | or (eq .Site.Params.env &amp;#34;production&amp;#34;) }}
&lt;span style="color:#75715e">&amp;lt;!-- Google Tag Manager --&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span>,&lt;span style="color:#a6e22e">d&lt;/span>,&lt;span style="color:#a6e22e">s&lt;/span>,&lt;span style="color:#a6e22e">l&lt;/span>,&lt;span style="color:#a6e22e">i&lt;/span>){&lt;span style="color:#a6e22e">w&lt;/span>[&lt;span style="color:#a6e22e">l&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">w&lt;/span>[&lt;span style="color:#a6e22e">l&lt;/span>]&lt;span style="color:#f92672">||&lt;/span>[];&lt;span style="color:#a6e22e">w&lt;/span>[&lt;span style="color:#a6e22e">l&lt;/span>].&lt;span style="color:#a6e22e">push&lt;/span>({&lt;span style="color:#e6db74">&amp;#39;gtm.start&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">new&lt;/span> Date().&lt;span style="color:#a6e22e">getTime&lt;/span>(),&lt;span style="color:#a6e22e">event&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#e6db74">&amp;#39;gtm.js&amp;#39;&lt;/span>});&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">getElementsByTagName&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span>.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>),&lt;span style="color:#a6e22e">dl&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span>&lt;span style="color:#f92672">!=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dataLayer&amp;#39;&lt;/span>&lt;span style="color:#f92672">?&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;amp;l=&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>;&lt;span style="color:#a6e22e">j&lt;/span>.&lt;span style="color:#66d9ef">async&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">true&lt;/span>;&lt;span style="color:#a6e22e">j&lt;/span>.&lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;https://www.googletagmanager.com/gtm.js?id=&amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">dl&lt;/span>;&lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">parentNode&lt;/span>.&lt;span style="color:#a6e22e">insertBefore&lt;/span>(&lt;span style="color:#a6e22e">j&lt;/span>,&lt;span style="color:#a6e22e">f&lt;/span>);
})(window,document,&lt;span style="color:#e6db74">&amp;#39;script&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;dataLayer&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;&amp;lt;your-container-id&amp;gt;&amp;#39;&lt;/span>);&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#75715e">&amp;lt;!-- End Google Tag Manager --&amp;gt;&lt;/span>
{{ end }}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!-- layouts/partials/gtm/body.html --&amp;gt;&lt;/span>
{{ if eq (getenv &amp;#34;HUGO_ENV&amp;#34;) &amp;#34;production&amp;#34; | or (eq .Site.Params.env &amp;#34;production&amp;#34;) }}
&lt;span style="color:#75715e">&amp;lt;!-- Google Tag Manager (noscript) --&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">noscript&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">iframe&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.googletagmanager.com/ns.html?id=&amp;lt;your-container-id&amp;gt;&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">height&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">style&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;display:none;visibility:hidden&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">iframe&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">noscript&lt;/span>&amp;gt;
&lt;span style="color:#75715e">&amp;lt;!-- End Google Tag Manager (noscript) --&amp;gt;&lt;/span>
{{ end }}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="パーシャルの読み込み">パーシャルの読み込み&lt;/h3>
&lt;p>テーマをカスタマイズしてGTMスニペットを配置していきます。&lt;/p>
&lt;p>まずはベースファイルをテーマからプロジェクト側にコピーします。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># ディレクトリ作成&lt;/span>
mkdir layouts/_default/
&lt;span style="color:#75715e"># ファイルコピー&lt;/span>
cp themes/anubis/layouts/_default/baseof.html layouts/_default/baseof.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイルがコピーできたら中身を編集します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!-- layouts/_default/baseof.html --&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
{{ $dataTheme := &amp;#34;&amp;#34; }}
{{ if eq site.Params.style &amp;#34;dark-without-switcher&amp;#34; }}
{{ $dataTheme = &amp;#34;dark&amp;#34; }}
{{ end }}
&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{ .Site.LanguageCode }}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">data-theme&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{{ $dataTheme }}&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
{{ partial &amp;#34;gtm/head.html&amp;#34; . }} &lt;span style="color:#75715e">&amp;lt;!-- この行を追加 --&amp;gt;&lt;/span>
{{ block &amp;#34;head&amp;#34; . }}
{{ partial &amp;#34;head.html&amp;#34; . }}
{{ end }}
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
{{ partial &amp;#34;gtm/body.html&amp;#34; . }} &lt;span style="color:#75715e">&amp;lt;!-- この行を追加 --&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;skip-main&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#main&amp;#34;&lt;/span>&amp;gt;{{ i18n &amp;#34;skipToContent&amp;#34; | humanize }}&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;container&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">header&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;common-header&amp;#34;&lt;/span>&amp;gt;
{{ block &amp;#34;header&amp;#34; . }}
{{ partial &amp;#34;header.html&amp;#34; . }}
{{ end }}
&amp;lt;/&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">main&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;main&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">tabindex&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;-1&amp;#34;&lt;/span>&amp;gt;
{{ block &amp;#34;main&amp;#34; . }}{{ end }}
&amp;lt;/&lt;span style="color:#f92672">main&lt;/span>&amp;gt;
{{ block &amp;#34;footer&amp;#34; . }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
{{ end }}
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="確認-1">確認&lt;/h3>
&lt;p>本番モードでローカルサーバーを起動してアクセスし、開発者ツールでスニペットが配置されているか確認します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">HUGO_ENV&lt;span style="color:#f92672">=&lt;/span>production hugo server -D
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="gtm-の設定">GTM の設定&lt;/h3>
&lt;p>Google Tag Manager のダッシュボードから変数の設定、タグの作成、公開を行います。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">Google Tab Manager&lt;/span>:
&lt;span style="color:#f92672">コンテナ&lt;/span>:
&lt;span style="color:#f92672">変数&lt;/span>:
&lt;span style="color:#f92672">ユーザー定義変数&lt;/span>:
- &lt;span style="color:#f92672">新規&lt;/span>:
&lt;span style="color:#f92672">変数名&lt;/span>: &lt;span style="color:#ae81ff">GA&lt;/span>
&lt;span style="color:#f92672">変数の設定&lt;/span>:
&lt;span style="color:#f92672">変数のタイプ&lt;/span>: &lt;span style="color:#ae81ff">定数&lt;/span>
&lt;span style="color:#f92672">値&lt;/span>: &lt;span style="color:#ae81ff">&amp;lt;Google Analyticsの測定ID&amp;gt;&lt;/span>
&lt;span style="color:#f92672">タグ&lt;/span>:
&lt;span style="color:#f92672">新規&lt;/span>:
- &lt;span style="color:#f92672">タグ名&lt;/span>: &lt;span style="color:#ae81ff">Google アナリティクス GA4 設定&lt;/span>
&lt;span style="color:#f92672">タグの設定&lt;/span>:
&lt;span style="color:#f92672">タグタイプ&lt;/span>: &lt;span style="color:#ae81ff">Googleアナリティクス:GA4設定&lt;/span>
&lt;span style="color:#f92672">測定ID&lt;/span>: {{&lt;span style="color:#ae81ff">GA}}&lt;/span>
&lt;span style="color:#f92672">トリガー&lt;/span>: &lt;span style="color:#ae81ff">All Pages&lt;/span>
&lt;span style="color:#f92672">公開&lt;/span>:
&lt;span style="color:#f92672">送信設定&lt;/span>: &lt;span style="color:#ae81ff">バージョンの公開と作成&lt;/span>
&lt;span style="color:#f92672">バージョン名&lt;/span>: &lt;span style="color:#ae81ff">GA4の設定追加&lt;/span>
&lt;span style="color:#f92672">バージョンの説明&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;span style="color:#f92672">環境への公開&lt;/span>: &lt;span style="color:#ae81ff">Live&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="確認-2">確認&lt;/h3>
&lt;p>本番モードでローカルサーバーを起動してアクセスし、&lt;code>&amp;lt;head&amp;gt;&lt;/code> 内に gtag があることを確認します。&lt;/p>
&lt;pre>&lt;code>&amp;lt;script type=&amp;quot;text/javascript&amp;quot; async=&amp;quot;&amp;quot; src=&amp;quot;http://www.googletagmanager.com/gtag/js?id=&amp;lt;測定ID&amp;gt;&amp;amp;l=dataLayer&amp;amp;cx=c&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;p>次に Google Analytics のダッシュボードを開き、リアルタイムタブで自分のアクセスが計測されていることを確認します。&lt;/p>
&lt;h2 id="google-search-console">Google Search Console&lt;/h2>
&lt;h3 id="本番モードでデプロイ">本番モードでデプロイ&lt;/h3>
&lt;p>ウェブサイトの所有確認に Google Tag Manager を利用するためデプロイしておきます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">HUGO_ENV&lt;span style="color:#f92672">=&lt;/span>production hugo
git add .
git commit -m &lt;span style="color:#e6db74">&amp;#34;add: ga&amp;#34;&lt;/span>
git push
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="プロパティの作成">プロパティの作成&lt;/h3>
&lt;p>&lt;a href="https://search.google.com/search-console">Google Search Console&lt;/a> にアクセスしてプロパティを作成します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">プロパティタイプ&lt;/span>: &lt;span style="color:#ae81ff">URL プレフィックス&lt;/span>
&lt;span style="color:#f92672">URL&lt;/span>: &lt;span style="color:#ae81ff">https://rema424.github.io/remalab/&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="privacy-policy">Privacy Policy&lt;/h2>
&lt;p>&lt;a href="https://marketingplatform.google.com/about/analytics/terms/jp/">Google アナリティクスの利用規約&lt;/a>において、利用者には次の事項が求められています。&lt;/p>
&lt;ul>
&lt;li>プライバシーポリシーを公開すること&lt;/li>
&lt;li>データの収集に使われる技術について通知すること&lt;/li>
&lt;li>Google アナリティクスの使用を通知すること&lt;/li>
&lt;li>Google アナリティクスでデータが収集、処理される仕組みについて開示すること&lt;/li>
&lt;/ul>
&lt;p>これらを盛り込んだ記事を Hugo で作成し、リンクをフッターに配置することにします。&lt;/p>
&lt;h3 id="ファイルの作成">ファイルの作成&lt;/h3>
&lt;p>プライバシーポリシーの記事ファイルを作成します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">hugo new info/privacy.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>内容を編集します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-md" data-lang="md">&lt;span style="color:#75715e">&amp;lt;!-- content/info/privacy.md --&amp;gt;&lt;/span>
---
title: &amp;#34;プライバシーポリシー&amp;#34;
date: 2020-10-31T14:38:12+09:00
draft: false
---
&lt;span style="color:#75715e">## アクセス解析ツールについて
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
当サイトでは、アクセス解析のために「Google アナリティクス」を使用しています。
データは Cookie を用いて収集されます。
Google アナリティクスでデータが収集・処理される仕組みの詳細については以下のリンク先を参照ください。
&lt;span style="color:#66d9ef">-&lt;/span> [&lt;span style="color:#f92672">ユーザーが Google パートナーのサイトやアプリを使用する際の Google によるデータ使用&lt;/span>](&lt;span style="color:#a6e22e">https://policies.google.com/technologies/partner-sites?hl=ja&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="リンクの設置">リンクの設置&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#75715e"># config.yaml&lt;/span>
&lt;span style="color:#f92672">menu&lt;/span>:
&lt;span style="color:#f92672">footer&lt;/span>:
- &lt;span style="color:#f92672">identifier&lt;/span>: &lt;span style="color:#ae81ff">privacy&lt;/span>
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">プライバシーポリシー&lt;/span>
&lt;span style="color:#f92672">title&lt;/span>: &lt;span style="color:#ae81ff">プライバシーポリシー&lt;/span>
&lt;span style="color:#f92672">url&lt;/span>: &lt;span style="color:#ae81ff">/info/privacy/&lt;/span>
&lt;span style="color:#f92672">weight&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="確認-3">確認&lt;/h3>
&lt;p>ローカルサーバーを起動して確認します。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">hugo server -D
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="デプロイ-1">デプロイ&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">HUGO_ENV&lt;span style="color:#f92672">=&lt;/span>production hugo --minify
git add .
git commit -m &lt;span style="color:#e6db74">&amp;#34;add: privacy&amp;#34;&lt;/span>
git push
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>プライバシーポリシー</title><link>https://rema424.github.io/remalab/info/privacy/</link><pubDate>Sat, 31 Oct 2020 14:38:12 +0900</pubDate><guid>https://rema424.github.io/remalab/info/privacy/</guid><description>&lt;h2 id="アクセス解析ツールについて">アクセス解析ツールについて&lt;/h2>
&lt;p>当サイトでは、アクセス解析のために「Google アナリティクス」を使用しています。&lt;/p>
&lt;p>データは Cookie を用いて収集されます。&lt;/p>
&lt;p>Google アナリティクスでデータが収集・処理される仕組みのについては以下のリンクをご参照ください。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://policies.google.com/technologies/partner-sites?hl=ja">ユーザーが Google パートナーのサイトやアプリを使用する際の Google によるデータ使用&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>